[project]
name = "ahbicht"
description = "Python Library to parse AHB expressions."
license = { text = "MIT" }
requires-python = ">=3.9"
authors = [
    { name = "Annika SchlÃ¶gl", email = "annika.schloegl@hochfrequenz.de" },
]
keywords = ["AHB", "Parsing", "Expressions"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "attrs>=21.4.0",
    "lark>=1.1.4",
    "inject",
    "marshmallow",
    "marshmallow_enum",
    "maus>=0.6.0",
    "pytz",
    "efoli>=1.1.0",
] # add all the dependencies here
dynamic = ["readme", "version"]

[project.optional-dependencies]
coverage = ["coverage==7.6.4"]
docs = ["sphinx==8.1.3", "sphinx-rtd-theme==3.0.1"]
formatting = ["black[jupyter]==24.10.0", "isort==5.13.2"]
json_schemas = ["marshmallow-jsonschema==0.13.0", "setuptools==75.2.0"]
linting = ["pylint==3.3.1"]
spellcheck = ["codespell==2.3.0"]
test_packaging = [
    "build==1.2.2.post1",
    "setuptools==75.2.0",
    "setuptools-scm==8.1.0",
    "twine==6.0.1",
]
tests = [
    "pytest==8.3.3",
    "pytest-asyncio==0.24.0",
    "pytest-datafiles==3.0.0",
    "pytest-mock==3.14.0",
]
type_check = ["mypy==1.13.0", "types-pytz==2024.2.0.20241003"]
dev = ["pip-tools"]

[tool.setuptools.dynamic]
readme = { file = "README.rst" }

[project.urls]
Changelog = "https://github.com/Hochfrequenz/ahbicht/releases"
Homepage = "https://github.com/Hochfrequenz/ahbicht"
Documentation = "https://ahbicht.readthedocs.io/en/latest/"

[tool.black]
line-length = 120

[tool.isort]
line_length = 120
profile = "black"

[tool.pylint."MESSAGES CONTROL"]
max-line-length = 120
disable = "fixme"

[tool.pytest.ini_options]
# When the mode is auto, all discovered async tests are considered asyncio-driven
# even if they have no @pytest.mark.asyncio marker.
# https://github.com/pytest-dev/pytest-asyncio#auto-mode
asyncio_mode = "auto"
markers = ["datafiles"]

[tool.mypy]
# warn_unused_ignores = true # doesn't work,because either 'error: Cannot infer type argument 1 of "Tree"  [misc]' but this is also flagged as unused ignore

[build-system]
requires = ["hatchling>=1.8.0", "hatch-vcs", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"


[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"
fragments = [{ path = "README.rst" }]

[tool.hatch.version]
source = "vcs"


[tool.hatch.build.targets.sdist]
exclude = ["/unittests"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]
